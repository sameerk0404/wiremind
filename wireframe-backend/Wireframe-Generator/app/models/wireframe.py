from pydantic import BaseModel, Field
from typing import Optional, Dict, List, Any, TypedDict


# Wireframe State for LangGraph
class WireframeState(TypedDict):
    user_query: str
    original_query: Optional[str]
    detailed_requirements: Optional[dict[str, Any]]
    wireframe_plan: Optional[dict[str, Any]]
    svg_code: Optional[str]
    errors: Optional[list[str]]

class WireframeRequest(BaseModel):
    """ Request model for wireframe generation """
    user_query: str = Field(..., description="User description of the desired wireframe")



class WireframeErrorResponse(BaseModel):
    """ Error Response model for wireframe generation API """
    error: str
    error_details: Optional[dict[str, Any]]

class WireframeResponse(BaseModel):
    """ Response model for wireframe generation """
    svg_code: str = Field(default=None, description="Generated wireframe")
    detailed_requirements : Optional[dict[str, Any]] = Field(default=None, description="Detailed requirements generated by the Requirement Getherign Agent for the wireframe")
    wireframe_plan: Optional[dict[str, Any]] = Field(default=None, description="Wireframe plan generated by the Wireframe Planning Agent for the wireframe")
    errors: Optional[List[str]] = None
    status: int





